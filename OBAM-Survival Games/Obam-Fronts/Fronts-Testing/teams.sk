#groups

#startfold @friendsystem	
		
command /team [<text>] [<text>]:
	permission: obam.free
	aliases: /t
	trigger:
	
	
		argument 1 is not set:
			{group.%player%} is true:
				send "&cYou can only be in one group at a time!" to player
				stop
			{group.creation.count} is not set:
				set {group.creation.count} to 0
			add 1 to {group.creation.count}
			set {group.%{group.creation.count}%.%player%::%player%} to "owner"
			set {group.%player%} to true
			set {group.id.%player%} to {group.creation.count}
			set {group.owner.%{group.id.%player%}%} to player
			send "&aTeam Created!"
			stop
			
			
		set {_group.id} to {group.id.%player%}
		set {_group.owner} to {group.owner.%{_group.id}%}
		
		argument 1 is "help" or "h":
			send "&a-----------&eTeams!&a---------" to player
			send "&e/team &a-------------<reset>Create a team" to player
			send "&e/team name &a--------<reset>Name current team" to player
			send "&e/team leave &a-------<reset>Leave a team" to player
			send "&e/team promote/demote&a-<reset>Promote or Demote a player" to player
			send "&e/team kick &a----------<reset>Kick a player from a team" to player
			send "&e/team invite &a------<reset>Invite a player to the team" to player
			send "&e/team accept &a------<reset>Accept an Invite" to player
			send "&e/team show &a--------<reset>Show members of a team" to player
			send "&e/team help &a--------<reset>Open this help menu" to player
		
		
		argument 1 is "leave" or "l":
			{group.%player%} is not true:
				send "&cYou are not in a Team!" to player
				stop
			{_group.owner} is player:
				loop {group.%{_group.id}%.%{_group.owner}%::*}:
					loop-value is "promoted"
					set {_new.owner} to loop-index parsed as player
					exit loop
				{_new.owner} is not set:
					set {_size} to size of {group.%{_group.id}%.%{_group.owner}%::*}
					set {_size} to {_size} - 1
					set {_ran} to random integer between 1 and {_size}
					loop {group.%{_group.id}%.%{_group.owner}%::*}:
						set {_player} to loop-index parsed as player
						{_player} is not player:
							{_count} is not set:
								set {_count} to 0
							add 1 to {_count}
						{_count} is {_ran}
						set {_new.owner} to {_player}
						exit loop
					
				{_new.owner} is not set:
					delete {group.%{_group.id}%.%{_group.owner}%::%player%}
					send "&aTeam Disbanded!" to player
					clear {group.%player%}
					clear {group.id.%player%}
					stop
					
						
					
				loop {group.%{_group.id}%.%{_group.owner}%::*}:
					set {_player} to loop-index parsed as player
					set {group.%{_group.id}%.%{_new.owner}%::%{_player}%} to loop-value
					delete {group.%{_group.id}%.%{_group.owner}%::%{_player}%}
				set {group.owner.%{_group.id}%} to {_new.owner}
				set {_group.owner} to {group.owner.%{_group.id}%}
				loop {group.%{_group.id}%.%{_group.owner}%::*}:
					set {_player} to loop-index parsed as player
					send "&e%{_new.owner}%&a is now the owner of the Team!" to {_player}
				set {group.%{_group.id}%.%{_group.owner}%::%{_new.owner}%} to "owner"
			delete {group.%{_group.id}%.%{_group.owner}%::%player%}
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%player% &chas left the Team!" to {_player}
			clear {group.%player%}
			clear {group.id.%player%}
			{_run.check} is not set:
				send "&aYou have left your Team!" to player
			stop
		
		argument 1 is "promote" or "p":
			{group.%player%} is not true:
				send "&cYou are not in a Team!" to player
				stop
				
			{_group.owner} is not player:
				send "&cYou must be the Team owner to do this!" to player
				stop
			
			argument 2 is not set:
				send "&cPlease input a player name!" to player
				stop
			
			argument 2 is {_group.owner}:
				send "&cYou can not promote yourself!" to player
				stop
				
			{group.%{_group.id}%.%{_group.owner}%::%argument 2%} is not set:
				send "&e%argument 2%&c is not on the team!" to player
				stop
			set {group.%{_group.id}%.%{_group.owner}%::%argument 2%} to "promoted"
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%argument 2%&a has been promoted!" to {_player}
			
			
			
			
		argument 1 is "invite" or "i":
			{group.%player%} is not true:
				send "&cYou are not in a Team!" to player
				stop
			argument 2 is not set:
				send "&cPlease input a player's name!" to player
				stop
				
			{_group.owner} is not player:
				{group.%{_group.id}%.%{_group.owner}%::%player%} is not "promoted":
					send "&cYou must be promoted for this action!" to player
					stop
			
			set {_player.invite} to argument 2 parsed as player
			set {inv.%{_player.invite}%.group.id} to {_group.id}
			set {inv.%{_player.invite}%.group.owner} to {_group.owner}
			set {inv.%{_player.invite}%} to true
			set {waited.invite.%{_player.invite}%} to now
			send "&aYou have invited &e%{_player.invite}%&a to the Team!" to player
			send "&aYou have been invited to %{_group.owner}%'s Team by &e%player%&a! Use &e/team accept&a to join the Team!" to {_player.invite}
			stop
			
		argument 1 is "accept" or "a":
			{inv.%player%} is not true:
				send "&cYou do not have any invites!"
				stop
			{group.%player%} is true:
				send "&cYou can only be in one Team at a time!" to player
				stop
			set {_group.id} to {inv.%player%.group.id}
			set {_group.owner} to {inv.%player%.group.owner}
			size of {group.%{_group.id}%.%{_group.owner}%::*} is 0:
				send "&cThat Team no longer exists!"
				stop
			difference between {waited.invite.%player%} and now is greater than or equal to 1 minute:
				send "&cYour invite has expired!" to player
				stop
			set {group.id.%player%} to {_group.id}
			set {group.%player%} to true
			set {group.%{_group.id}%.%{_group.owner}%::%player%} to "regular"
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%player% has joined the Team!" to {_player}
			send "&aYou have accepted the invite!" to player
			
		argument 1 is "name" or "n":
			{group.%player%} is not true:
				send "&cYou must be in a Team to do this!" to player
				stop
			{_group.owner} is not player:
				send "&cYou must be the Team owner to do this!" to player
				stop
			argument 2 is not set:
				clear {group.%{_group.id}%.name}
				send "&aTeam name erased!" to player
				stop
			set {group.%{_group.id}%.name} to "%argument 2%"
			send "&aTeam name set to &e%argument 2%" to player
			
		argument 1 is "kick" or "k":
			{_group.owner} is not player:
				{group.%{_group.id}%.%{_group.owner}%::%player%} is not "promoted":
					send "&cYou must be Promoted to perform this action!" to player
					stop
			argument 2 is not set:
				send "&cPlease input a player name!" to player
				stop
			{group.%{_group.id}%.%{_group.owner}%::%argument 2%} is not set:
				send "&cThat player is not part of the Team!" to player
				stop
			{_group.owner} is argument 2:
				send "&cYou can not kick the owner!" to player
				stop
			
			delete {group.%{_group.id}%.%{_group.owner}%::%argument 2%}
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%argument 2% &chas been kicked from the Team!" to {_player}
			set {_player} to argument 2 parsed as player
			send "&cYou have been kicked from &e%{_group.owner}%'s &cTeam!" to {_player}
			clear {group.%argument 2%}
			clear {group.id.%argument 2%}
			
		argument 1 is "demote" or "d":
			{_group.owner} is not player:
				send "&cYou must be the Team owner to do this!" to player
				stop
			argument 2 is not set:
				send "&cPlease input a player name!" to player
				stop
			{group.%{_group.id}%.%{_group.owner}%::%argument 2%} is not set:
				send "&e%argument 2% &cis not part of the Team!" to player
				stop
			{group.%{_group.id}%.%{_group.owner}%::%argument 2%} is not "promoted":
				send "&e%argument 2% &cis not promoted!" to player
				stop
				
			set {group.%{_group.id}%.%{_group.owner}%::%argument 2%} to "regular"
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%argument 2%&c has been demoted!" to {_player}
		
		argument 1 is "owner" or "o":
			{_group.owner} is not player:
				send "&cYou must be the Team owner to do this!" to player
				stop
			argument 2 is not set:
				send "&cPlease input a player name!" to player
				stop
			{group.%{_group.id}%.%{_group.owner}%::%argument 2%} is not set:
				send "&e%argument% &cis not part of the Team!" to player
				stop
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				set {group.%{_group.id}%.%argument 2%::%{_player}%} to loop-value
				delete {group.%{_group.id}%.%{_group.owner}%::%{_player}%}
			set {group.owner.%{_group.id}%} to argument 2
			set {_group.owner} to {group.owner.%{_group.id}%}
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&e%argument 2%&a is now the owner of the Team!" to {_player}
			set {group.%{_group.id}%.%{_group.owner}%::%player%} to "regular"
			set {group.%{_group.id}%.%{_group.owner}%::%argument 2%} to "owner"
			
		argument 1 is "Close" or "c":
			{group.%player%} is not true:
				send "&cYou must be in a group to do this!"
				stop
			{_group.owner} is not player:
				send "&cYou must be the Team owner to do this!" to player
				stop
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				clear {group.%{_player}%}
				clear {group.id.%{_player}%}
				send "&aTeam Disbanded!" to {_player}
				delete {group.%{_group.id}%.%{_group.owner}%::%{_player}%}
				
		argument 1 is "show" or "s":
			{group.%player%} is not true:
				send "&cYou must be in a group to do this!" to player
				stop
			{group.%{_group.id}%.name} is not set:
				send "&a--------&e%{_group.owner}%'s Team!&a--------" to player
			else:
				send "&a--------&e%{group.%{_group.id}%.name}%&a-------" to player
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				send "&a%{_player}%&e....&a%loop-value%" to player
				
				
				
				
on quit:
	set {_group.id} to {group.id.%player%}
	set {_group.owner} to {group.owner.%{_group.id}%} 
	{_group.owner} is player:
		loop {group.%{_group.id}%.%{_group.owner}%::*}:
			loop-value is "promoted"
			set {_new.owner} to loop-index parsed as player
			exit loop
		{_new.owner} is not set:
			set {_size} to size of {group.%{_group.id}%.%{_group.owner}%::*}
			set {_size} to {_size} - 1
			set {_ran} to random integer between 1 and {_size}
			loop {group.%{_group.id}%.%{_group.owner}%::*}:
				set {_player} to loop-index parsed as player
				{_player} is not player:
					{_count} is not set:
						set {_count} to 0
					add 1 to {_count}
				{_count} is {_ran}
				set {_new.owner} to {_player}
				exit loop
					
		{_new.owner} is not set:
			delete {group.%{_group.id}%.%{_group.owner}%::%player%}
			clear {group.%player%}
			clear {group.id.%player%}
			stop
			
		loop {group.%{_group.id}%.%{_group.owner}%::*}:
			set {_player} to loop-index parsed as player
			set {group.%{_group.id}%.%{_new.owner}%::%{_player}%} to loop-value
			delete {group.%{_group.id}%.%{_group.owner}%::%{_player}%}
		set {group.owner.%{_group.id}%} to {_new.owner}
		set {_group.owner} to {group.owner.%{_group.id}%}
		loop {group.%{_group.id}%.%{_group.owner}%::*}:
			set {_player} to loop-index parsed as player
			send "&e%{_new.owner}%&a is now the owner of the Team!" to {_player}
		set {group.%{_group.id}%.%{_group.owner}%::%{_new.owner}%} to "owner"
		delete {group.%{_group.id}%.%{_group.owner}%::%player%}
		clear {group.%player%}
		clear {group.id.%player%}
		stop
			
	loop {group.%{_group.id}%.%{_group.owner}%::*}:
		set {_player} to loop-index parsed as player
		send "&e%player%&a has left the team!" to {_player}
	delete {group.%{_group.id}%.%{_group.owner}%::%player%}
	clear {group.%player%}
	clear {group.id.%player%}
		

					
	
			
			
			
command /groupshow [<text>]:
	trigger:
		send "%{group.id.%argument%}%"
		set {_group.owner} to {group.owner.%{group.id.%argument%}%}
		send "%{_group.owner}%"
		set {_group.id} to {group.id.%argument%}
		send "%{group.%{_group.id}%.%{_group.owner}%::%argument%}%"
		
command /groupleave [<text>]:
	trigger:
		clear {group.%player%}
		clear {group.id.%player%}
		
		
			